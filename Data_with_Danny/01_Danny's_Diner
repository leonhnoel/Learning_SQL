

-- 1. What is the total amount each customer spent at the restaurant?

SELECT
  customer_id,
  SUM(price) AS spend
FROM sales
INNER JOIN menu
  ON sales.product_id = menu.product_id
GROUP BY customer_id,
         customer_product;

-- 2. How many days has each customer visited the restaurant?

SELECT
  customer_id,
  COUNT(DISTINCT (order_date)) AS nr_of_visits
FROM sales
GROUP BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

SELECT
  customer_id,
  product_id
FROM sales
QUALIFY ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) = 1;

-- OR

WITH CTE
AS (SELECT
  *,
  ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) AS row_number
FROM sales)
SELECT
  customer_id,
  product_id
FROM CTE
WHERE row_number = 1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT
  m.product_name,
  COUNT(*) AS times_ordered
FROM sales AS s
INNER JOIN menu AS m
  ON s.product_id = m.product_id
GROUP BY m.product_name
ORDER BY times_ordered DESC
LIMIT 1;

-- 5. Which item was the most popular for each customer?

SELECT
  s.customer_id,
  m.product_name,
  COUNT(*) AS times_ordered
FROM sales AS s
INNER JOIN menu AS m
  ON s.product_id = m.product_id
GROUP BY s.customer_id,
         m.product_name
QUALIFY DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY times_ordered DESC) = 1;

-- 6. Which item was purchased first by the customer after they became a member?

SELECT
  s.customer_id,
  me.product_name
FROM
  SALES AS s
  INNER JOIN members AS m
    ON s.customer_id = m.customer_id
  INNER JOIN menu AS me
    ON s.product_id = me.product_id
WHERE m.join_date <= s.order_date
QUALIFY DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date ASC) = 1;

-- 7. Which item was purchased just before the customer became a member?

SELECT
  s.customer_id,
  me.product_name
FROM
  SALES AS s
  INNER JOIN members AS m
    ON s.customer_id = m.customer_id
  INNER JOIN menu AS me
    ON s.product_id = me.product_id
WHERE m.join_date > s.order_date
QUALIFY DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) = 1;

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT
  s.customer_id,
  COUNT(*) AS total_items,
  SUM(me.price) AS total_spend
FROM
  SALES AS s
  LEFT JOIN members AS m
    ON s.customer_id = m.customer_id
  LEFT JOIN menu AS me
    ON s.product_id = me.product_id
WHERE m.join_date > s.order_date OR m.join_date IS NULL
GROUP BY s.customer_id;

-- 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT
  s.customer_id,
  SUM(
      CASE
        WHEN me.product_name = 'sushi' THEN 20 * me.price
        ELSE 10 * me.price
      END
  ) AS points
FROM SALES AS s
LEFT JOIN members AS m
  ON s.customer_id = m.customer_id
LEFT JOIN menu AS me
  ON s.product_id = me.product_id
GROUP BY s.customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH first_week
AS (SELECT
  s.customer_id,
  me.product_name,
  s.order_date,
  m.join_date,
  CASE
    WHEN DATEDIFF(DAY, m.join_date, s.order_date) BETWEEN 0 AND 6 THEN 20
    ELSE 10
  END AS multiplier,
  (me.price) AS total_spend
FROM SALES AS s
LEFT JOIN members AS m
  ON s.customer_id = m.customer_id
LEFT JOIN menu AS me
  ON s.product_id = me.product_id
WHERE s.customer_id IN ('A', 'B')
)

SELECT
  customer_id,
  SUM(multiplier * total_spend) AS points
FROM first_week
GROUP BY customer_id;